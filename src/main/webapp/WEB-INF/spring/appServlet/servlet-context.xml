<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Annotation 활성화
		@Controller, @Autowire, @Repository, @Component, ...
		전처리 : 컴파일러에게 알려줌, 어노테이션 : 주석 -> /** 시작 -->
	<annotation-driven />
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- web.xml 에서 DispatcherServlet 의 매핑 url-pattern 이 '/*' 일때
	jsp 안에서 사용하는 js, css, image 등 resource file 만 매핑하는 구문임
	즉, resource file 들은 /resources/ 위치에 만들어 사용해야 함 -->
	<resources mapping="/**" location="/resources/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 뷰리졸버 객체 생성 : View 의 prefix 와 suffix 지정 @Controller 에서 뷰 리턴시 적용됨
	예를들어 Index Controller 에서 "index" 를 리턴하면 /WEB-INF/view/index.jsp 파일이 리턴됨 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 인터셉터 bean -->
	<beans:bean id="logininteceptor" class="com.mclass.buyday.member.interceptor.LoginInterceptor"></beans:bean>
	
	<interceptors>
		<interceptor>
			<!-- 어떤 URL 요청에 인터셉터를 적용할지 -->
			<mapping path="/member/loginPost" />
			<!-- 어떤 경로에 있는 인터셉터를 적용할건지 (인터셉터 bean id 와 매핑	) -->
			<beans:ref bean="logininteceptor" />
		</interceptor>
		
	</interceptors>
	
	
	<!-- 파일 업로드 API -->
	<!-- MultipartResolver는 컨트롤러에게 Multipart객체를 전달해준다. -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 업로드 가능한 최대 파일 사이즈 -->
		<beans:property name="maxUploadSize" value="5000000"/>
		<!-- 업로드전 임시 메모리 사이즈 -->
		<beans:property name="maxInMemorySize" value="20000000"/>
		<beans:property name="defaultEncoding" value="utf-8"/>
	</beans:bean>
	
	<beans:bean class="java.lang.String" id="uploadPath">
		<beans:constructor-arg value="\\resources\\upload"></beans:constructor-arg>
	</beans:bean>
	
	
	<!-- @Component 애너테이션이 붙은 클래스들을 모두 스캔을 해서 객체로 만들어주는 역할
		이렇게 만들어진 객체는 스프링 컨테이너에 보관, 스프링 컨테이너 : 객체를 보관하는 메모리
		com.mclass.buyday 안에 모든 파일의 @component 어노테이션을 스캔함 -->
	<context:component-scan base-package="com.mclass.buyday" />
	
</beans:beans>
